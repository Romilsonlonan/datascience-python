TRABALHAR COM ARQUIVOS DE TEXTO COM PYTHON ‚Äì [LER, EDITAR E CRIAR]

Resumo

Nessa aula n√≥s vamos te mostrar como trabalhar com arquivos de texto com Python, ou seja, vamos te 
mostrar como voc√™ pode abrir, editar e at√© criar um arquivo de texto utilizando o Python.

As vezes √© bem √∫til automatizar esse tipo de procedimento com texto para que possa ter relat√≥rios de 
entradas ou at√© mesmo relat√≥rios de atualiza√ß√£o de algum processo que esteja fazendo.

Trabalhar com Texto em Python

Voc√™ alguma vez j√° tentou trabalhar com texto em Python ou com arquivos de texto com Python? Se ainda 
n√£o fez isso hoje n√≥s vamos te mostrar como abrir, editar e criar um arquivo de texto com Python. E √© 
claro, vamos te mostrar uma dica muito importante para abrir seus arquivos e n√£o ter problema quando 
esquece de fechar o arquivo. Isso √© muito √∫til, pois pode travar a execu√ß√£o caso seu arquivo continue 
aberto enquanto tenta utiliz√°-lo!

Arquivos de Texto com Python

Antes de iniciar √© muito importante que voc√™ lembre que sempre que abrir um arquivo voc√™ tem que fechar 
ele antes de dar continuidade ao outro c√≥digo, pois pode ter alguns problemas. O arquivo pode n√£o salvar 
corretamente, pode ter alguns problemas na hora da execu√ß√£o do c√≥digo. Ent√£o a solu√ß√£o para resolver esse 
problema e acabar n√£o esquecendo de fechar o arquivo √© utilizar a estrutura With no Python. N√≥s vamos 
utilizar 3 arquivos de texto que est√£o dispon√≠veis para download: email.txt, senha.txt e mensagem.txt.

Com esses arquivos n√≥s vamos poder fazer algumas modifica√ß√µes para que voc√™ possa aprender como trabalhar 
com textos no Python!

# read --> para arquivos simples (ex: senhas, tokens, informa√ß√µes unicas)

with open("email.txt", "r") as arquivo:
    email = arquivo.read():
print(email)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXX

with open("senha.txt", "r") as arquivo:
    email = arquivo.read()
print(senha)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXXX

with open("mensagem.txt", "r", encoding="utf-8") as arquivo:
    email = arquivo.readlines()

for frase in texto:
    if "faturamento" in frase:
        print(email)

C√≥digo para ler arquivos de texto com Python

Aqui n√≥s estamos utilizando a estrutura With para abrir arquivo de texto com Python. Veja que dentro 
dessa estrutura n√≥s temos 2 argumentos:

--> O primeiro √© o nome do arquivo (se estiver na mesma pasta basta colocar apenas o nome, sem o caminho 
completo), 

--> O segundo √© o que vamos fazer com o arquivo.

Utilizando o ‚Äúr‚Äù n√≥s vamos ler o arquivo (R vem de Read, que significa ler em ingl√™s), ent√£o vamos 
conseguir ler e mostrar na tela o conte√∫do desse arquivo.

Vamos agora a uma breve explica√ß√£o desses c√≥digos.

Nos dois primeiros blocos n√≥s estamos apenas abrindo os arquivos de e-mail e senha, atribuindo o seu 
conte√∫do a uma vari√°vel e em seguida mostrando esse conte√∫do na tela. No terceiro bloco n√≥s temos 
algumas novidades. A primeira √© o uso do encoding =‚Äùutf-8‚Äù que √© para que o Python consiga ler 
corretamente as informa√ß√µes que possuem acento.

Veja a diferen√ßa utilizando com e sem o encoding.

with open("mensagem.txt", "r") as arquivos:
    texto = arquivo.read()
    print(texto)

with open("mensagem.txt", "r", encoding="utf-8") as arquivos:
    texto = arquivo.read()
    print(texto)

Prezados, 

O faturamento desse m√™s foi  de: R$15.000
Qualquer d√∫vida que estiverem, √© so falar.

Att.,
Romilson

Testando a codifica√ß√£o para o padr√£o brasileiro

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXX

√â poss√≠vel notar que sem essa codifica√ß√£o n√≥s temos problemas com as letras que possuem acento ou 
caractere especial, ent√£o √© necess√°rio utilizar essa codifica√ß√£o caso queira ver as informa√ß√µes da 
forma correta!

Outro ponto diferente que temos nesse bloco em rela√ß√£o aos outros √© a utiliza√ß√£o do arquivo.read() 
para arquivo.readlines(). A primeira op√ß√£o permite com que o usu√°rio leia todo o conte√∫do normalmente, 
mas n√£o permite a separa√ß√£o por linhas.

Essa separa√ß√£o √© muito √∫til quando vamos utilizar a estrutura de repeti√ß√£o for para mostrar na tela 
apenas a linha que cont√©m a informa√ß√£o ‚Äúfaturamento‚Äù. Dessa forma conseguimos fazer uma verifica√ß√£o 
linha a linha e trazer o resultado desejado, caso contr√°rio o Python n√£o consegue buscar essa 
informa√ß√£o de texto e n√£o traz nenhum resultado.

Vamos agora para o nosso segundo exemplo utilizando o segundo argumento do With como ‚Äúw‚Äù (que vem de 
Write, que significa escrever em ingl√™s). Isso quer dizer que podemos editar arquivo de texto com 
Python (escrever no arquivo/ substituir seu conte√∫do) caso o arquivo j√° exista. Agora caso esse 
arquivo ainda n√£o exista o c√≥digo vai criar arquivo de texto com Python e ent√£o escrever o que foi 
solicitado. Isso quer dizer que se n√£o temos o arquivo ele criar, e se j√° tivermos ele substitui o 
conte√∫do com a nova informa√ß√£o.

# substitui por completo o texto  que est√° escrito 

with open("email.txt", "r") as arquivo:
    email = arquivo.read()
print(email)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXX

with open("email.txt", "w") as arquivo:
    arquivo.write("pythontxt@gmail.com")

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXXX

with open("email.txt", "r") as arquivo:
    email = arquivo.read()
print(email)

Escrevendo (substituindo) no arquivo de texto

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Aqui temos primeiramente a leitura do arquivo de e-mail para mostrar o conte√∫do dele. Em seguida temos a 
utiliza√ß√£o do modo de escrita, onde alteramos o conte√∫do desse arquivo. E por fim temos mais um c√≥digo 
para leitura novamente para verificar o conte√∫do do arquivo. √â poss√≠vel notar que o conte√∫do do arquivo 
foi modificado, ent√£o agora temos a nova informa√ß√£o que substituiu a anterior. Agora voc√™ deve estar se 
perguntando, ‚ÄúMas ent√£o, como eu vou acrescentar uma informa√ß√£o sem apagar a informa√ß√£o anterior??‚Äù. Isso 
√© simples e √© o nosso pr√≥ximo exemplo. Para isso n√≥s vamos utilizar o ‚Äúa‚Äù como segundo argumento da 
estrutura with(que vem de Append, que significa acrescentar em ingl√™s). Ent√£o vamos poder adicionar no 
arquivo a informa√ß√£o desejada sem apagar ou substituir o que j√° t√≠nhamos nesse arquivo.

with open("senha.txt", "a") as arquivos:
    arquivo.write("\n789456")
print(email)

Adicionando (acrescentando) uma informa√ß√£o no arquivo de texto


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Aqui por exemplo estamos adicionando uma segunda senha ao nosso arquivo senha.txt. Ent√£o vamos 
adicionar uma nova senha dentro desse mesmo arquivo.

IMPORTANTE: Veja que antes da senha n√≥s estamos escrevendo o \n que significa que estamos pulando uma 
linha, ou seja, n√£o vamos escrever logo a frente da √∫ltima informa√ß√£o. Vamos escrever na linha logo 
abaixo, assim as informa√ß√µes ficam organizadas e separadas dentro do arquivo.


senha.txt - Bloco de Notas

üóìÔ∏è Arquivo Editar Formatar Exibir Ajudar

123456
789456

Arquivo de senha com 2 informa√ß√µes em linhas diferentes


Veja que agora temos duas informa√ß√µes e elas est√£o em linhas diferentes, isso √© muito importante para 
separar esses dados. Pois se voc√™ n√£o colocar o separador essas informa√ß√µes ficar√£o juntas e voc√™ n√£o 
vai conseguir identificar qual √© uma senha ou outra.

Conclus√£o

Nessa aula n√≥s te mostramos como trabalhar com arquivos de texto com Python. Agora voc√™ j√° sabe como 
ler as informa√ß√µes de um arquivo, como substituir as informa√ß√µes no arquivo, como criar um arquivo e 
j√° colocar informa√ß√µes dentro dele ou at√© mesmo adicionar informa√ß√µes em um arquivo j√° existente. Com 
esses conhecimentos voc√™ j√° pode come√ßar a praticar com os arquivos que tem para melhorar ainda mais 
seus c√≥digos. Ent√£o vai poder utilizar os arquivos em texto dentro dos c√≥digos (utilizando o conte√∫do 
deles) ou at√© mesmo gravar informa√ß√µes dentro de arquivos para criar um relat√≥rio sempre que utilizar 
seu c√≥digo.

As possibilidades s√£o diversas, basta praticar e aplicar na sua rotina de programa√ß√£o!

Hashtag Treinamentos
